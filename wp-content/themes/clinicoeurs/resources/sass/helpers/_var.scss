//FONTFACE

@font-face {
  font-family: "Castoro";
  src: url('../../../../../../fonts/Castoro-Italic.ttf') format("truetype");
  font-weight: normal;
  font-style: italic;
}

@font-face {
  font-family: "Castoro";
  src: url('../../../../../../fonts/Castoro-Regular.ttf') format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: "Oxygen";
  src: url('../../../../../../fonts/Oxygen-Regular.ttf') format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: "Oxygen";
  src: url('../../../../../../fonts/Oxygen-Bold.ttf') format("truetype");
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: "Oxygen";
  src: url('../../../../../../fonts/Oxygen-Light.ttf') format("truetype");
  font-weight: 300;
  font-style: normal;
}

//VAR FOR BACKGROUNG
$background-color: #FFFFF0;

//COLOR
$color: #3C508C;
$pastelRed: #EFA79F;
$pastelYellow: #FFE15E;
$pastelGreen: #B9DAC3;
$pastelBleu: #A2DAF1;
$pastelPurple: #DADAFF;
$pastelOrange: #FFC785;

//Définition du mappage(cartographie) des colors et des valeurs hexadecimales (table de caractère)
$map-colors: (
  // argument 1 = $element (son nom repris dans la classe de l'objet)
  // argument 2 = $couleur    (sa correspondance -> valeur hex)
        "rouge": $pastelRed,
        "orange": $pastelOrange,
        "jaune": $pastelYellow,
        "vert": $pastelGreen,
        "bleu": $pastelBleu,
        "violet": $pastelPurple,
);


// FONT-FAMILY
$sans-serif: "Oxygen", sans-serif;
$serif: "Castoro", serif;

//VAR FOR MEDIA QUERIES
$maxWidthPhone: 380px;
$maxWidthLargePhone: 767px;
$maxWidthLargeTablet: 1220px;
$maxWidthLargeLaptop: 1800px;

$breakpoints: (
        'phone': (max-width: calc(30rem)), //480px
        'large-phone': (min-width: calc(30rem + 1px)), //481px
        'tablet': (min-width: calc(48rem - 1px)), // //767px
        'large-tablet': (min-width: calc(60rem)), // //960px
        'laptop': (min-width: 80rem), //1280px
        'large-laptop': (min-width: 100rem), //1600px
        'desktop': (min-width: 120rem) //1920px
) !default;


@mixin mq($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// FONT SIZE
$phonefontSize: 1rem;
$largeTableFontSize: 1.15rem;
$LaptopfontSize: 1.125rem;
$largeLaptopfontSize: 1.25rem;

//LINE HEIGHT
$phoneMediumLineHeight: 125%;
$phoneH2LineHeight: 125%;
$phoneLineHeight : 133%;

//TITLE (homepage)
$phoneH2Size: 2.5rem;
$phoneH3Size: 1.875rem;

$largePhoneH2Size: 3rem;
$largePhoneH3Size: 2rem;

$tabletH2Size: 3.5rem;
$tabletH3Size: 2rem;

$laptopH3Size: 2.5rem;


//MARGIN
$phoneSmallMarginSize: 1rem;
$phoneMediumMarginSize: 1.5rem;
$laptopMediumMarginSize: 2rem;
$largeLaptopMediumMarginSize: 3rem;

//ANCHOR
@mixin basicAnchor {
  text-decoration: underline;
  font-weight: bold;
}

@mixin coloredButton($color) {
  border: black solid 0;
  background-color: $color;
  padding: 1rem;
  font-weight: bold;
}

@mixin bigAnchor {
  margin-block: 2rem;
  font-size: 2rem;
  text-decoration-thickness : 0.2rem;

  @include mq(large-phone) {
    font-size: 3rem;
  }
}

//VERTICAL SPACER
$phoneSmallVerticalSpacer: 0.5rem;
$phoneMediumVerticalSpacer: 1rem;
$phoneLargeVerticalSpacer: 2rem;
$phoneXLargeVerticalSpacer: 3rem;
$phoneXXLargeVerticalSpacer: 4rem;


//TITLE (otherPage)
$phoneH2Size-notHome: 3rem;
$phoneH3Size-notHome: 1.875rem;


$largePhoneH2Size-notHome: 3rem;
$largePhoneH3Size-notHome: 2rem;


$tabletH2Size-notHome: 5rem;
$tabletH3Size-notHome: 2rem;

$laptopH3Size-notHome: 2.5rem;


//TAGLINE (otherPage)
$phoneTaglineSize: 1.25rem;
$largePhoneTaglineSize: 1.5rem;
$tabletTaglineSize: 1.75rem;
$laptopTaglineSize: 2rem;


@mixin templateForMainClass() {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: center;
  margin-block-start: 5.5rem;
  & section, &  p, & img, & h2{
    margin: 0;
    padding: 0;
  }
}

@mixin templateForHeroClass(){
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-block-end: 1.5rem;

  @include mq(large-phone) {
    margin-block-end: 2rem;
  }

  @include mq(tablet) {
    margin-block-end: 3rem;
  }

  @include mq(laptop) {
    margin-block-end: 4rem;
  }

  &__container {
    position: relative;
    margin-block-end: 1.25rem;

    .hero__image {
      width: auto;
      max-width: 100%;

      @include mq(phone) {
        min-height: 120px;
        opacity: 50%;
      }

      @include mq(tablet) {
        width: 100%;
        //max-width: $maxWidthLargeTablet;
      }

      @include mq(Laptop) {
        width: 100%;
        max-width: 1400px;
      }
    }

    .hero__title {
      @include mq(phone) {
        max-width: 400px;
        width: 320px;
        font-size: $phoneH2Size-notHome;
      }

      @include mq(large-phone) {
        max-width: initial;
        width: 100%;
        font-size: $largePhoneH2Size-notHome;
      }

      @include mq(large-tablet) {
        font-size: $tabletH2Size-notHome;
      }


      text-align: center;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      margin: 0;
    }
  }

  .hero__tagline {
    padding-inline: $phoneMediumMarginSize;
    max-width: 30rem;
    text-align: center;

    @include mq(tablet) {
      margin-block-start: 1rem;
      max-width: calc(48rem - 1px);
      font-size: $phoneTaglineSize;
    }

    @include mq(large-tablet) {
      max-width: calc(48rem - 1px);
      font-size: $largePhoneTaglineSize;
    }

    @include mq(laptop){
      margin-block-start: 2rem;
    }

    @include mq(large-Laptop) {
      font-size: $laptopTaglineSize;
    }
  }
}


@mixin manageImageSizes(){
  width: 300px;
  height: 300px;
  object-fit: cover;
  object-position: 65% 35%;


  @include mq(large-phone) {
    width: 400px;
    height: 400px;
  }

  @include mq(tablet) {
    max-width: 350px;
    width: 100%;
    height: auto;
    aspect-ratio: 1;
  }

  @include mq(tablet) {
    max-width: 450px;
    width: 100%;
  }
}